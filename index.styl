//////////////////////////////////////////////////////////////////////////////////////////
//
// Responsive Pixels mixins for Stylus.
//
// ‘Because web design should not require a calculator.’
//
// Copyright © 2012-2013 Aral Balkan.
// Released under the MIT License.
//
// Think in pixels; have them automatically translated to rems.
//
//////////////////////////////////////////////////////////////////////////////////////////

// This is the default root line height
baseLineHeight = 24rem

QuarterLineHeight = baseLineHeight/4 rem
HalfLineHeight = baseLineHeight/2 rem
ThreeQuartersLineHeight = baseLineHeight*3/4 rem
OneLineHeight = baseLineHeight rem
OneAndAHalfLineHeights = baseLineHeight*1.5 rem
OneAndAQuarterLineHeights = baseLineHeight*1.25 rem
OneAndThreeQuartersLineHeights = baseLineHeight*1.75 rem
TwoLineHeights = baseLineHeight*2 rem
TwoAndAQuarterLineHeights = baseLineHeight*2.25 rem
TwoAndAHalfLineHeights = baseLineHeight*2.5 rem
TwoAndThreeQuartersLineHeights = baseLineHeight*2.75 rem
ThreeLineHeights = baseLineHeight*3 rem
ThreeAndAQuarterLineHeights = baseLineHeight*3.25 rem
ThreeAndAHalfLineHeights = baseLineHeight*3.5 rem
ThreeAndThreeQuartersLineHeights = baseLineHeight*3.75 rem
FourLineHeights = baseLineHeight*4 rem
FiveLineHeights = baseLineHeight*5 rem

calculateLineHeightConstants()
	QuarterLineHeight = baseLineHeight/4 rem
	HalfLineHeight = baseLineHeight/2 rem
	ThreeQuartersLineHeight = baseLineHeight*3/4 rem
	OneLineHeight = baseLineHeight rem
	OneAndAHalfLineHeights = baseLineHeight*1.5 rem
	OneAndAQuarterLineHeights = baseLineHeight*1.25 rem
	OneAndThreeQuartersLineHeights = baseLineHeight*1.75 rem
	TwoLineHeights = baseLineHeight*2 rem
	TwoAndAQuarterLineHeights = baseLineHeight*2.25 rem
	TwoAndAHalfLineHeights = baseLineHeight*2.5 rem
	TwoAndThreeQuartersLineHeights = baseLineHeight*2.75 rem
	ThreeLineHeights = baseLineHeight*3 rem
	ThreeAndAQuarterLineHeights = baseLineHeight*3.25 rem
	ThreeAndAHalfLineHeights = baseLineHeight*3.5 rem
	ThreeAndThreeQuartersLineHeights = baseLineHeight*3.75 rem
	FourLineHeights = baseLineHeight*4 rem
	FiveLineHeights = baseLineHeight*5 rem

//
// Displays a baseline grid (optionally with a horizontal grid also set to the base line height)
// Issue: Not all grid lines appear to draw correctly in Firefox or Opera (they work in Safari).
//
showBaselineGrid(show = yes, baseFontSize = 16, showQuarterLineHeightMarks=no, showHorizontalGrid=no, majorLineColor=hsl(220, 50%, 70%), minorLineColor=hsl(220, 25%, 85%), quarterMarkLineColor=hsl(220, 5%, 95%), horizontalGridColor=hsl(360, 25%, 85%))

	if show == yes

		if showHorizontalGrid == no
			//
			// Just show the vertical baseline grid.
			//
			if showQuarterLineHeightMarks == no
				//
				// Show line-height and half-line-height marks.
				//
				background-image -webkit-linear-gradient(majorLineColor 1px, transparent 1px), -webkit-linear-gradient(minorLineColor 1px, transparent 1px)
				background-image -moz-linear-gradient(majorLineColor 1px, transparent 1px), -moz-linear-gradient(minorLineColor 1px, transparent 1px)
				background-image -o-linear-gradient(majorLineColor 1px, transparent 1px), -o-linear-gradient(minorLineColor 1px, transparent 1px)
				background-image linear-gradient(majorLineColor 1px, transparent 1px), linear-gradient(minorLineColor 1px, transparent 1px)

				// Also allow for a different baseFontSize to be passed in (mostly used to
				// demonstrate that vertical rhythm is maintained when scaling).
				baseLineHeightInPixels = (baseLineHeight*baseFontSize/16);

				background-size 100% unit(baseLineHeightInPixels, px), 100% unit(baseLineHeightInPixels/2, px)
			else
				//
				// Show line-height, half-line-height, and quarter-line-height marks.
				//
				background-image -webkit-linear-gradient(majorLineColor 1px, transparent 1px), -webkit-linear-gradient(minorLineColor 1px, transparent 1px), -webkit-linear-gradient(quarterMarkLineColor 1px, transparent 1px)
				background-image -moz-linear-gradient(majorLineColor 1px, transparent 1px), -moz-linear-gradient(minorLineColor 1px, transparent 1px), -moz-linear-gradient(quarterMarkLineColor 1px, transparent 1px)
				background-image -o-linear-gradient(majorLineColor 1px, transparent 1px), -o-linear-gradient(minorLineColor 1px, transparent 1px), -o-linear-gradient(quarterMarkLineColor 1px, transparent 1px)
				background-image linear-gradient(majorLineColor 1px, transparent 1px), linear-gradient(minorLineColor 1px, transparent 1px), linear-gradient(quarterMarkLineColor 1px, transparent 1px)

				// Also allow for a different baseFontSize to be passed in (mostly used to
				// demonstrate that vertical rhythm is maintained when scaling).
				baseLineHeightInPixels = (baseLineHeight*baseFontSize/16);

				background-size 100% unit(baseLineHeightInPixels, px), 100% unit(baseLineHeightInPixels/2, px), 100% unit(baseLineHeightInPixels/4, px)
		else
			//
			// Show horizontal grid lines too.
			//
			if showQuarterLineHeightMarks == 'no'
				//
				// Show horizontal grid, line-height, half-line-height marks.
				//
				background-image -webkit-linear-gradient(majorLineColor 1px, transparent 1px), -webkit-linear-gradient(minorLineColor 1px, transparent 1px)
				background-image -moz-linear-gradient(majorLineColor 1px, transparent 1px), -moz-linear-gradient(minorLineColor 1px, transparent 1px)
				background-image -o-linear-gradient(majorLineColor 1px, transparent 1px), -o-linear-gradient(minorLineColor 1px, transparent 1px)
				background-image linear-gradient(majorLineColor 1px, transparent 1px), linear-gradient(minorLineColor 1px, transparent 1px)

				// Also allow for a different baseFontSize to be passed in (mostly used to
				// demonstrate that vertical rhythm is maintained when scaling).
				baseLineHeightInPixels = (baseLineHeight*baseFontSize/16);

				background-size 100% unit(baseLineHeightInPixels, px), 100% unit(baseLineHeightInPixels/2, px)
			else
				//
				// Show horizontal-grid, line-height, half-line-height, and quarter-line-height marks.
				//
				background-image -webkit-linear-gradient(left, horizontalGridColor 1px, transparent 1px), -webkit-linear-gradient(majorLineColor 1px, transparent 1px), -webkit-linear-gradient(minorLineColor 1px, transparent 1px), -webkit-linear-gradient(quarterMarkLineColor 1px, transparent 1px)
				background-image -moz-linear-gradient(majorLineColor 1px, transparent 1px), -moz-linear-gradient(minorLineColor 1px, transparent 1px), -moz-linear-gradient(quarterMarkLineColor 1px, transparent 1px)
				background-image -o-linear-gradient(majorLineColor 1px, transparent 1px), -o-linear-gradient(minorLineColor 1px, transparent 1px), -o-linear-gradient(quarterMarkLineColor 1px, transparent 1px)
				background-image linear-gradient(majorLineColor 1px, transparent 1px), linear-gradient(minorLineColor 1px, transparent 1px), linear-gradient(quarterMarkLineColor 1px, transparent 1px)

				// Also allow for a different baseFontSize to be passed in (mostly used to
				// demonstrate that vertical rhythm is maintained when scaling).
				baseLineHeightInPixels = (baseLineHeight*baseFontSize/16);

				background-size unit(baseLineHeightInPixels, px) 100%, 100% unit(baseLineHeightInPixels, px), 100% unit(baseLineHeightInPixels/2, px), 100% unit(baseLineHeightInPixels/4, px)

		// In all cases, turn on background repeat in case developer turned it off in HTML
		// for her own custom background.
		background-repeat repeat


//
// Requires a variable called rootLineHeight to be set in your styles. If
// there isn’t one, defaults to 24px. The return value is in pixel‐parity rems
// (so divided by the default root font size of 16).
//
relative-line-height(h)
	if unit(h) == 'rlh'
		relativeLineHeight = baseLineHeight * h / 16;
		line-height unit(relativeLineHeight, 'rem')

//
// CSS overrides
//

line-height(h)
	if unit(h) == 'px'
		line-height unit(h, 'px')
		line-height unit(h/16, 'rem')
	else
		line-height unit(h, unit(h))

/* Convert unit if pixel */

fallbackify(value)
	if value == 'inherit' || value == 'auto' || value == 0
		value
	else if unit(value) == 'px'
		unit(value, 'px')
	else
		unit(value, unit(value))

remify(value)
	if value == 'inherit' || value == 'auto' || value == 0
		value
	else if unit(value) == 'px'
		unit(value/16, 'rem')
	else
		unit(value, unit(value))

/* Abstract shorthand for attributes that can have 1-4 arguments
   (top, right, left, bottom) */

abstract-shorthand(attr, originalArguments)

	t = originalArguments[0]
	r = originalArguments[1]
	b = originalArguments[2]
	l = originalArguments[3]

	if l || l == 0
		{attr} fallbackify(t) fallbackify(r) fallbackify(b) fallbackify(l)
		{attr} remify(t) remify(r) remify(b) remify(l)
	else if b || b == 0
		{attr} fallbackify(t) fallbackify(r) fallbackify(b)
		{attr} remify(t) remify(r) remify(b)
	else if r || r == 0
		{attr} fallbackify(t) fallbackify(r)
		{attr} remify(t) remify(r)
	else if t || t == 0
		{attr} fallbackify(t)
		{attr} remify(t)

/* Abstract longhand for attributes that take a single value */

abstract-longhand(attr, originalArguments)
	value = originalArguments[0]

	fallbackifyValue = fallbackify(value)
	
	{attr} fallbackifyValue

	/* Note: nested if on purpose. Otherwise Stylus runs all conditionals, causing an error (doesn’t break on first false one) */
	if fallbackifyValue != 'inherit'
		if fallbackifyValue != 'auto'
			if fallbackifyValue != 0
				if unit(fallbackifyValue) == "px"
					{attr} remify(value)


/* Margin */

margin()
	abstract-shorthand('margin', arguments)

margin-top()
	abstract-longhand('margin-top', arguments)

margin-right()
	abstract-longhand('margin-right', arguments)

margin-bottom()
	abstract-longhand('margin-bottom', arguments)

margin-left()
	abstract-longhand('margin-left', arguments)

/* Padding */

padding()
	abstract-shorthand('padding', arguments)

padding-top()
	abstract-longhand('padding-top', arguments)

padding-right()
	abstract-longhand('padding-right', arguments)

padding-bottom()
	abstract-longhand('padding-bottom', arguments)

padding-left()
	abstract-longhand('padding-left', arguments)

/* Font size */

font-size()
	abstract-longhand('font-size', arguments)

/* Max width */

max-width()
	abstract-longhand('max-width', arguments)

max-height()
	abstract-longhand('max-height', arguments)

/* Border */

abstract-border(borderType, borderArgs, originalArguments)
	value = borderArgs[0];

	// Only  'none'
	if typeof(value) is 'unit'

		style = borderArgs[1];
		color = borderArgs[2];

		if unit(value) == 'px'
			{borderType} unit(value, 'px') style color
			{borderType} unit(value/16, 'rem') style color
		else
			{borderType} value style color
	else
		{borderType} originalArguments

border(args...)
	abstract-border('border', args, arguments)

border-top(args...)
	abstract-border('border-top', args, arguments)

border-right(args...)
	abstract-border('border-right', args, arguments)

border-bottom(args...)
	abstract-border('border-bottom', args, arguments)

border-left(args...)
	abstract-border('border-left', args, arguments)

border-radius()
	abstract-longhand('border-radius', arguments)

/* Width */

width(w)
	abstract-longhand('width', arguments)

/* Relative and absolute positioning */

top()
	abstract-longhand('top', arguments)

bottom()
	abstract-longhand('bottom', arguments)

left()
	abstract-longhand('left', arguments)

right()
	abstract-longhand('right', arguments)


//
// Typography
//

useJustifiedText()
	text-align justify
	hyphens(auto)

hyphens(value)
	-webkit-hyphens value
	-moz-hyphens value
	-o-hyphens value
	hyphens value




